import re
import imaplib
import email
import yaml
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
import os
from datetime import datetime, timedelta
import openai  # Import the OpenAI library
from openai import OpenAI
from openai import OpenAI
client = OpenAI(api_key="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")

class email_agent:
    def __init__(self, task=None):
        # Load credentials from a YAML file
        with open("details.yml") as f:
            content = f.read()
            my_credentials = yaml.load(content, Loader=yaml.FullLoader)
            self.user, self.password = my_credentials["user"], my_credentials["password"]
            self.task = task
            self.current_date = datetime.now().strftime("%d-%b-%Y")

        # Set OpenAI API key
        openai.api_key = "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"  # Replace with your actual OpenAI API key

    def analyze_prior_emails(self):
        print("\n" + "=" * 50)
        print("üìß RETRIEVING AND SUMMARIZING EMAILS")
        print("=" * 50 + "\n")

        try:
            imap_url = 'imap.gmail.com'
            my_mail = imaplib.IMAP4_SSL(imap_url)
            my_mail.login(self.user, self.password)
            my_mail.select('Inbox')

            search_criteria = f'SINCE "{self.current_date}"'

            _, data = my_mail.search(None, search_criteria)
            if not data[0]:
                print(f"‚ùå No emails found.")
                my_mail.logout()
                return None  # No emails found

            mail_id_list = data[0].split()
            print(f"\nüì¨ Found {len(mail_id_list)} emails.\n")

            msgs = []
            email_details = []  # Collect email details (sender, subject, body)

            for num in mail_id_list:
                typ, data = my_mail.fetch(num, '(RFC822)')
                msgs.append(data)

            for msg in msgs[::-1]:
                for response_part in msg:
                    if isinstance(response_part, tuple):
                        my_msg = email.message_from_bytes(response_part[1])
                        subject = my_msg['subject']
                        sender_email = my_msg['from']
                        body = ""

                        # Get the body of the email
                        for part in my_msg.walk():
                            if part.get_content_type() == 'text/plain':
                                body = part.get_payload(decode=True).decode()

                        # Store the subject, sender, and body for summarization
                        email_details.append({
                            'subject': subject,
                            'sender': sender_email,
                            'body': body
                        })

            # Check if email details were found
            if not email_details:
                print("‚ùå No email details found.")
                return None

            print("üìß Summarizing email details...\n")

            # Prepare the email details to be analyzed by the OpenAI GPT model
            formatted_email_details = ""
            for index,email_info in enumerate(email_details):
                formatted_email_details += f"Email:{index} Subject: {email_info['subject']}\nFrom: {email_info['sender']}\nBody: {email_info['body']}\n\n"

            # Call the OpenAI GPT model to assess the importance of each email
            try:
                response = client.chat.completions.create(
                    model="gpt-4o",  # You can choose another GPT model
                    messages=[
                        {
                            'role': 'system',
                            'content': f'''
                            You are an AI designed to assess the importance of multiple emails,each email has its own index please give me a index sequence which order means importance based on their content. Below are the details of the emails:

                            {formatted_email_details}

                            The output should be in the format of email indices, such as: 0,1,2 or 1,0,2, etc.

                            No explanation is needed.
                            '''
                        }
                    ]
                )

                importance_order = response.choices[0].message.content
                importance_list = [email_details[int(index)] for index in importance_order.split(",")]
                print(f"{importance_list}")
                return importance_list

            except Exception as e:
                print(f"‚ùå Error in OpenAI processing: {e}")
                return None

        except Exception as e:
            print(f"‚ùå Error: {e}")
            return None
        
    def send_email(self, importance_list):
        try:
            print(list(importance_list))
            # Loop through each email in the prioritized list
            for email_info in list(importance_list):
                # Ensure the email_info is a dictionary and contains the expected fields
                print(f"Processing Email: {email_info}")  # Debugging line

                # Extract Subject, Sender, and Body of the email
                subject = email_info['subject']
                sender_email = email_info['sender']
                body = email_info['body']

                # Generate a reply using OpenAI (LLM)
                try:
                    # Prompt OpenAI to generate the email response
                    response = client.chat.completions.create(
                        model="gpt-4o",  # Choose the model
                        messages=[{
                            'role': 'system',
                            'content': f'''
                                You are Vaibhav Mehra's AI assistant. Based on the email below, generate a reply:
                                - Subject: {subject}
                                - From: {sender_email}
                                - Body: {body}
                                
                                Please generate the response with the following format:
                                Recipient_email: [email]
                                Subject: [subject]
                                Body: [body]
                            '''
                        }]
                    )

                    # Print the OpenAI response for debugging
                    generated_content = response.choices[0].message.content
                    print(f"Generated Content: {generated_content}")  # Debugging line

                    # Parse the response content from OpenAI
                    recipient_email, generated_subject, generated_body = self.parse_generated_content(generated_content)

                    if not recipient_email:
                        print(f"‚ùå No recipient email found for email from {sender_email}.")
                        continue  # Skip to the next email if no recipient is found

                    print(f"Generated Recipient: {recipient_email}")
                    print(f"Generated Subject: {generated_subject}")
                    print(f"Generated Body:\n{generated_body}")

                except Exception as e:
                    print(f"‚ùå Error generating reply for email from {sender_email}: {str(e)}")
                    continue  # Skip to the next email if there is an error

                # Create the email message with the generated content
                msg = MIMEMultipart()
                msg['From'] = self.user  # Sender's email address
                msg['To'] = recipient_email  # Recipient's email address
                msg['Subject'] = generated_subject  # Email subject
                msg.attach(MIMEText(generated_body, 'plain'))  # Attach the body with MIMEText

                # Send the email via SMTP
                try:
                    smtp_server = "smtp.gmail.com"
                    smtp_port = 587
                    server = smtplib.SMTP(smtp_server, smtp_port)
                    server.starttls()  # Start TLS encryption
                    server.login(self.user, self.password)  # Login with credentials
                    server.send_message(msg)  # Send the email
                    print(f"‚úÖ Email sent successfully to {recipient_email}!")

                except Exception as e:
                    print(f"‚ùå Failed to send email to {recipient_email}: {str(e)}")
                
                finally:
                    server.quit()  # Quit the SMTP server connection
                    print("‚úÖ SMTP session ended.")
        
        except Exception as e:
            print(f"‚ùå Error in send_email function: {str(e)}")

    def parse_generated_content(self, generated_content):
        try:
            print(f"Parsing generated content: {generated_content}")  # Debugging line
            # Split the response into its components: recipient, subject, and body
            lines = generated_content.strip().split('\n')
            print(f"Lines after splitting: {lines}")  # Debugging line

            recipient_email = lines[0].split(':')[-1].strip()
            subject = lines[1].split(':')[-1].strip()
            body = '\n'.join(lines[2:]).strip()

            return recipient_email, subject, body
        except Exception as e:
            print(f"‚ùå Error parsing generated content: {str(e)}")
            return None, None, None





# Run the agent
agent = email_agent()
prioritized_emails = agent.analyze_prior_emails()
agent.send_email(prioritized_emails)
